2019-10-10 10:13:07,000 [INFO] from akka.event.slf4j.Slf4jLogger in application-akka.actor.default-dispatcher-3 - Slf4jLogger started
2019-10-10 10:13:07,001 [DEBUG] from akka.event.EventStream in application-akka.actor.default-dispatcher-3 - logger log1-Slf4jLogger started
2019-10-10 10:13:07,002 [DEBUG] from akka.event.EventStream in application-akka.actor.default-dispatcher-3 - Default Loggers started
2019-10-10 10:13:07,128 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - Driver class org.h2.Driver found in Thread context class loader ReloadableClassLoader(v1){file:/Users/ldipotet/scala/server-side-test-master/target/scala-2.12/classes/}
2019-10-10 10:13:07,139 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - db - configuration:
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - allowPoolSuspension.............false
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - autoCommit......................true
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - catalog.........................none
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - connectionInitSql...............none
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - connectionTestQuery.............none
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - connectionTimeout...............30000
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - dataSource......................none
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - dataSourceClassName.............none
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - dataSourceJNDI..................none
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - dataSourceProperties............{password=<masked>}
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - driverClassName................."org.h2.Driver"
2019-10-10 10:13:07,141 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - healthCheckProperties...........{}
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - healthCheckRegistry.............none
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - idleTimeout.....................600000
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - initializationFailTimeout.......-1
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - isolateInternalQueries..........false
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - jdbcUrl.........................jdbc:h2:mem:play;DB_CLOSE_DELAY=-1
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - leakDetectionThreshold..........0
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - maxLifetime.....................1800000
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - maximumPoolSize.................20
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - metricRegistry..................none
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - metricsTrackerFactory...........none
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - minimumIdle.....................20
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - password........................<masked>
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - poolName........................"db"
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - readOnly........................false
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - registerMbeans..................false
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - scheduledExecutor...............none
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - schema..........................none
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - threadFactory...................internal
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - transactionIsolation............default
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - username........................none
2019-10-10 10:13:07,142 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-3 - validationTimeout...............5000
2019-10-10 10:13:07,144 [INFO] from com.zaxxer.hikari.HikariDataSource in play-dev-mode-akka.actor.default-dispatcher-3 - db - Starting...
2019-10-10 10:13:07,154 [INFO] from com.zaxxer.hikari.HikariDataSource in play-dev-mode-akka.actor.default-dispatcher-3 - db - Start completed.
2019-10-10 10:13:07,256 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db housekeeper - db - Pool stats (total=0, active=0, idle=0, waiting=1)
2019-10-10 10:13:07,281 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn0: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,281 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn1: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,282 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn2: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,282 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn3: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,282 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn4: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,282 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn5: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,283 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn6: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,283 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn7: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,283 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn8: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,283 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn9: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,284 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn10: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,284 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn11: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,285 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn12: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,285 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn13: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,285 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn14: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,285 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn15: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,285 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn16: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,286 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn17: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,286 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn18: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,286 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn19: url=jdbc:h2:mem:play user=
2019-10-10 10:13:07,394 [INFO] from play.api.http.EnabledFilters in play-dev-mode-akka.actor.default-dispatcher-3 - Enabled Filters (see <https://www.playframework.com/documentation/latest/Filters>):


2019-10-10 10:13:07,400 [INFO] from play.api.Play in play-dev-mode-akka.actor.default-dispatcher-3 - Application started (Dev) (no global state)
2019-10-10 10:13:07,592 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table IMPRESSION
|     columns: TypeMapping
|       0: ProductNode
|         1: OptionApply
|           0: Path s3.ID : Int'
|         2: Path s3.PLACEMENT : String'
|         3: Path s3.BIDDER : String'
|         4: OptionApply
|           0: Path s3.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function =
|     0: Path s2.ID : Int'
|     1: LiteralNode 1 (volatileHint=false)

2019-10-10 10:13:07,601 [DEBUG] from slick.compiler.AssignUniqueSymbols in application-akka.actor.default-dispatcher-5 - Detected features: UsedFeatures(false,true,false,true)
2019-10-10 10:13:07,603 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table IMPRESSION
|     columns: TypeMapping
|       0: ProductNode
|         1: OptionApply
|           0: Path s5.ID : Int'
|         2: Path s5.PLACEMENT : String'
|         3: Path s5.BIDDER : String'
|         4: OptionApply
|           0: Path s5.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function =
|     0: Path s4.ID : Int'
|     1: LiteralNode 1 (volatileHint=false)

2019-10-10 10:13:07,605 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase unrollTailBinds: (no change)
2019-10-10 10:13:07,611 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase inferTypes: (no change)
2019-10-10 10:13:07,617 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-5 - Found Selects for NominalTypes: @(slick.jdbc.H2Profile$._.IMPRESSION)
2019-10-10 10:13:07,621 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-5 - With correct table types:
| Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   from s4: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   where: Apply Function = : Boolean
|     0: Path s4.ID : Int'
|     1: LiteralNode 1 (volatileHint=false) : Int'

2019-10-10 10:13:07,622 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-5 - Table expansions: @t6 -> (s5,TypeMapping)
2019-10-10 10:13:07,623 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-5 - Expanding tables in result type
2019-10-10 10:13:07,627 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase expandTables:
| Bind : Vector[t8<Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]>]
|   from s7: Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     from s4: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.ID : Int'
|       1: LiteralNode 1 (volatileHint=false) : Int'
|   select: Pure t8 : Vector[t8<Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]>]
|     value: TypeMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|       0: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|         1: OptionApply : Option[Int']
|           0: Path s7.ID : Int'
|         2: Path s7.PLACEMENT : String'
|         3: Path s7.BIDDER : String'
|         4: OptionApply : Option[java.time.LocalDateTime']
|           0: Path s7.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:07,632 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]>]
|   from s7: Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     from s4: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.ID : Int'
|       1: LiteralNode 1 (volatileHint=false) : Int'
|   select: Pure t8 : Vector[t8<Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]>]
|     value: TypeMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|       0: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|         1: OptionApply : Option[Int']
|           0: Path s7.ID : Int'
|         2: Path s7.PLACEMENT : String'
|         3: Path s7.BIDDER : String'
|         4: OptionApply : Option[java.time.LocalDateTime']
|           0: Path s7.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:07,636 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase removeMappedTypes:
| Bind : Vector[t8<(Option[Int'], String', String', Option[java.time.LocalDateTime'])>]
|   from s7: Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     from s4: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.ID : Int'
|       1: LiteralNode 1 (volatileHint=false) : Int'
|   select: Pure t8 : Vector[t8<(Option[Int'], String', String', Option[java.time.LocalDateTime'])>]
|     value: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|       1: OptionApply : Option[Int']
|         0: Path s7.ID : Int'
|       2: Path s7.PLACEMENT : String'
|       3: Path s7.BIDDER : String'
|       4: OptionApply : Option[java.time.LocalDateTime']
|         0: Path s7.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:07,639 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>] -> Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
2019-10-10 10:13:07,639 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:07,639 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Int' -> Int'
2019-10-10 10:13:07,639 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Int' -> Int'
2019-10-10 10:13:07,639 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Boolean -> Boolean
2019-10-10 10:13:07,640 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>] -> Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
2019-10-10 10:13:07,640 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:07,640 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Int' -> Int'
2019-10-10 10:13:07,640 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Option[Int'] -> Option[Int']
2019-10-10 10:13:07,640 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:07,640 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: String' -> String'
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: String' -> String'
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: java.time.LocalDateTime' -> java.time.LocalDateTime'
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Option[java.time.LocalDateTime'] -> Option[java.time.LocalDateTime']
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: (Option[Int'], String', String', Option[java.time.LocalDateTime']) -> (Option[Int'], String', String', Option[java.time.LocalDateTime'])
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Vector[t8<(Option[Int'], String', String', Option[java.time.LocalDateTime'])>] -> Vector[t8<(Option[Int'], String', String', Option[java.time.LocalDateTime'])>]
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-5 - Translated type: Vector[t8<(Option[Int'], String', String', Option[java.time.LocalDateTime'])>] -> Vector[t8<(Option[Int'], String', String', Option[java.time.LocalDateTime'])>]
2019-10-10 10:13:07,641 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase expandSums: (no change)
2019-10-10 10:13:07,642 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase emulateOuterJoins: (no change)
2019-10-10 10:13:07,645 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase expandRecords:
| Bind : Vector[t8<(Option[Int'], String', String', Option[java.time.LocalDateTime'])>]
|   from s7: Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     from s4: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.ID : Int'
|       1: LiteralNode 1 (volatileHint=false) : Int'
|   select: Pure t8 : Vector[t8<(Option[Int'], String', String', Option[java.time.LocalDateTime'])>]
|     value: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|       1: OptionApply : Option[Int']
|         0: Path s7.ID : Int'
|       2: Path s7.PLACEMENT : String'
|       3: Path s7.BIDDER : String'
|       4: OptionApply : Option[java.time.LocalDateTime']
|         0: Path s7.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:07,648 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Analyzing s4.ID with symbols 
| Path s4.ID : Int'

2019-10-10 10:13:07,649 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Translated s4.ID to:
| Path s4.ID

2019-10-10 10:13:07,649 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Flattening projection t8
2019-10-10 10:13:07,649 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Analyzing s7.ID with symbols 
| Path s7.ID : Int'

2019-10-10 10:13:07,649 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Translated s7.ID to:
| Path s7.ID

2019-10-10 10:13:07,649 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Analyzing s7.PLACEMENT with symbols 
| Path s7.PLACEMENT : String'

2019-10-10 10:13:07,649 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Translated s7.PLACEMENT to:
| Path s7.PLACEMENT

2019-10-10 10:13:07,650 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Analyzing s7.BIDDER with symbols 
| Path s7.BIDDER : String'

2019-10-10 10:13:07,650 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Translated s7.BIDDER to:
| Path s7.BIDDER

2019-10-10 10:13:07,650 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Analyzing s7.TIMEVAL with symbols 
| Path s7.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:07,650 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Translated s7.TIMEVAL to:
| Path s7.TIMEVAL

2019-10-10 10:13:07,651 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Flattening node at Path 
| ProductNode
|   1: OptionApply
|     0: Path s7.ID
|   2: Path s7.PLACEMENT
|   3: Path s7.BIDDER
|   4: OptionApply
|     0: Path s7.TIMEVAL

2019-10-10 10:13:07,653 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Flattening node at Path _1
| OptionApply
|   0: Path s7.ID

2019-10-10 10:13:07,654 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Adding definition: s9 -> OptionApply
2019-10-10 10:13:07,654 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Flattening node at Path _2
| Path s7.PLACEMENT

2019-10-10 10:13:07,654 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Adding definition: s10 -> Path s7.PLACEMENT
2019-10-10 10:13:07,654 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Flattening node at Path _3
| Path s7.BIDDER

2019-10-10 10:13:07,654 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Adding definition: s11 -> Path s7.BIDDER
2019-10-10 10:13:07,655 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Flattening node at Path _4
| OptionApply
|   0: Path s7.TIMEVAL

2019-10-10 10:13:07,655 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Adding definition: s12 -> OptionApply
2019-10-10 10:13:07,656 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Adding translation for t8: (Map(List(_2) -> s10, List(_1) -> s9, List(_3) -> s11, List(_4) -> s12), UnassignedType)
2019-10-10 10:13:07,658 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-5 - Flattened projection to
| Pure t8
|   value: StructNode
|     s9: OptionApply
|       0: Path s7.ID
|     s10: Path s7.PLACEMENT
|     s11: Path s7.BIDDER
|     s12: OptionApply
|       0: Path s7.TIMEVAL

2019-10-10 10:13:07,660 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase flattenProjections:
| Bind : Vector[t8<{s9: Option[Int'], s10: String', s11: String', s12: Option[java.time.LocalDateTime']}>]
|   from s7: Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     from s4: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     where: Apply Function = : Boolean
|       0: Path s4.ID : Int'
|       1: LiteralNode 1 (volatileHint=false) : Int'
|   select: Pure t8 : Vector[t8<{s9: Option[Int'], s10: String', s11: String', s12: Option[java.time.LocalDateTime']}>]
|     value: StructNode : {s9: Option[Int'], s10: String', s11: String', s12: Option[java.time.LocalDateTime']}
|       s9: OptionApply : Option[Int']
|         0: Path s7.ID : Int'
|       s10: Path s7.PLACEMENT : String'
|       s11: Path s7.BIDDER : String'
|       s12: OptionApply : Option[java.time.LocalDateTime']
|         0: Path s7.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:07,661 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase rewriteJoins: (no change)
2019-10-10 10:13:07,663 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase verifySymbols: (no change)
2019-10-10 10:13:07,665 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase relabelUnions: (no change)
2019-10-10 10:13:07,665 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase createAggregates: (no change)
2019-10-10 10:13:07,666 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase resolveZipJoins: (no change)
2019-10-10 10:13:07,668 [DEBUG] from slick.compiler.PruneProjections in application-akka.actor.default-dispatcher-5 - Unreferenced: t8; Field refs: (@t6,BIDDER), (@t6,PLACEMENT), (@t6,TIMEVAL), (@t6,ID)
2019-10-10 10:13:07,669 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase pruneProjections: (no change)
2019-10-10 10:13:07,670 [DEBUG] from slick.compiler.RewriteDistinct in application-akka.actor.default-dispatcher-5 - No DISTINCT used as determined by assignUniqueSymbols - skipping phase
2019-10-10 10:13:07,670 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase rewriteDistinct: (no change)
2019-10-10 10:13:07,672 [DEBUG] from slick.compiler.CreateResultSetMapping in application-akka.actor.default-dispatcher-5 - Creating mapping from t8<Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]>
2019-10-10 10:13:07,672 [DEBUG] from slick.compiler.CreateResultSetMapping in application-akka.actor.default-dispatcher-5 - Creating mapping from (Option[Int'], String', String', Option[java.time.LocalDateTime'])
2019-10-10 10:13:07,672 [DEBUG] from slick.compiler.CreateResultSetMapping in application-akka.actor.default-dispatcher-5 - Creating mapping from Option[Int']
2019-10-10 10:13:07,672 [DEBUG] from slick.compiler.CreateResultSetMapping in application-akka.actor.default-dispatcher-5 - Creating mapping from String'
2019-10-10 10:13:07,673 [DEBUG] from slick.compiler.CreateResultSetMapping in application-akka.actor.default-dispatcher-5 - Creating mapping from String'
2019-10-10 10:13:07,673 [DEBUG] from slick.compiler.CreateResultSetMapping in application-akka.actor.default-dispatcher-5 - Creating mapping from Option[java.time.LocalDateTime']
2019-10-10 10:13:07,675 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]]
|   from s13: Bind : Vector[t8<{s9: Option[Int'], s10: String', s11: String', s12: Option[java.time.LocalDateTime']}>]
|     from s7: Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|       from s4: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.ID : Int'
|         1: LiteralNode 1 (volatileHint=false) : Int'
|     select: Pure t8 : Vector[t8<{s9: Option[Int'], s10: String', s11: String', s12: Option[java.time.LocalDateTime']}>]
|       value: StructNode : {s9: Option[Int'], s10: String', s11: String', s12: Option[java.time.LocalDateTime']}
|         s9: OptionApply : Option[Int']
|           0: Path s7.ID : Int'
|         s10: Path s7.PLACEMENT : String'
|         s11: Path s7.BIDDER : String'
|         s12: OptionApply : Option[java.time.LocalDateTime']
|           0: Path s7.TIMEVAL : java.time.LocalDateTime'
|   map: TypeMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|     0: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|       1: Path s13.s9 : Option[Int']
|       2: Path s13.s10 : String'
|       3: Path s13.s11 : String'
|       4: Path s13.s12 : Option[java.time.LocalDateTime']

2019-10-10 10:13:07,677 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-5 - Hoisting operations from defs: s9, s12
2019-10-10 10:13:07,679 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-5 - New defs: Map(0 -> (Path s7.ID,s14), 1 -> (Path s7.PLACEMENT,s15), 2 -> (Path s7.BIDDER,s16), 3 -> (Path s7.TIMEVAL,s17))
2019-10-10 10:13:07,685 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-5 - New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]]
|   from s13: Bind : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|     from s7: ...
|     select: Pure t18 : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|       value: StructNode : {s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}
|         s14: Path s7.ID : Int'
|         s15: Path s7.PLACEMENT : String'
|         s16: Path s7.BIDDER : String'
|         s17: Path s7.TIMEVAL : java.time.LocalDateTime'
|   map: TypeMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|     0: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|       1: OptionApply : Option[Int']
|         0: Path s13.s14 : Int'
|       2: Path s13.s15 : String'
|       3: Path s13.s16 : String'
|       4: OptionApply : Option[java.time.LocalDateTime']
|         0: Path s13.s17 : java.time.LocalDateTime'

2019-10-10 10:13:07,687 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]]
|   from s13: Bind : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|     from s7: Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|       from s4: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|       where: Apply Function = : Boolean
|         0: Path s4.ID : Int'
|         1: LiteralNode 1 (volatileHint=false) : Int'
|     select: Pure t18 : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|       value: StructNode : {s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}
|         s14: Path s7.ID : Int'
|         s15: Path s7.PLACEMENT : String'
|         s16: Path s7.BIDDER : String'
|         s17: Path s7.TIMEVAL : java.time.LocalDateTime'
|   map: TypeMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|     0: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|       1: OptionApply : Option[Int']
|         0: Path s13.s14 : Int'
|       2: Path s13.s15 : String'
|       3: Path s13.s16 : String'
|       4: OptionApply : Option[java.time.LocalDateTime']
|         0: Path s13.s17 : java.time.LocalDateTime'

2019-10-10 10:13:07,689 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase reorderOperations: (no change)
2019-10-10 10:13:07,691 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Table fields: Map(@t6 -> Vector(ID, PLACEMENT, BIDDER, TIMEVAL))
2019-10-10 10:13:07,695 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Creating source from TableNode:
| Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]

2019-10-10 10:13:07,696 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Mappings are: ConstArray(((@t6,ID),List(ID)), ((@t6,PLACEMENT),List(PLACEMENT)), ((@t6,BIDDER),List(BIDDER)), ((@t6,TIMEVAL),List(TIMEVAL)))
2019-10-10 10:13:07,696 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Building new Comprehension from:
| Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]

2019-10-10 10:13:07,706 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Built new Comprehension:
| Comprehension s19, None, None, ConstArray(), None, None, None, None, false : Vector[t20<{s21: Int', s22: String', s23: String', s24: java.time.LocalDateTime'}>]
|   from s19: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t20 : Vector[t20<{s21: Int', s22: String', s23: String', s24: java.time.LocalDateTime'}>]
|     value: StructNode : {s21: Int', s22: String', s23: String', s24: java.time.LocalDateTime'}
|       s21: Path s19.ID : Int'
|       s22: Path s19.PLACEMENT : String'
|       s23: Path s19.BIDDER : String'
|       s24: Path s19.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:07,706 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Replacements are: Map((@t6,ID) -> s21, (@t6,PLACEMENT) -> s22, (@t6,BIDDER) -> s23, (@t6,TIMEVAL) -> s24)
2019-10-10 10:13:07,708 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   from s4: ...
|   where: Apply Function = : Boolean
|     0: Path s4.ID : Int'
|     1: LiteralNode 1 (volatileHint=false) : Int'

2019-10-10 10:13:07,710 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Merged Filter into Comprehension:
| Comprehension s19, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t20<{s21: Int', s22: String', s23: String', s24: java.time.LocalDateTime'}>]
|   from s19: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t20 : Vector[t20<{s21: Int', s22: String', s23: String', s24: java.time.LocalDateTime'}>]
|     value: StructNode : {s21: Int', s22: String', s23: String', s24: java.time.LocalDateTime'}
|       s21: Path s19.ID : Int'
|       s22: Path s19.PLACEMENT : String'
|       s23: Path s19.BIDDER : String'
|       s24: Path s19.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function = : Boolean
|     0: Path s19.ID : Int'
|     1: LiteralNode 1 (volatileHint=false) : Int'

2019-10-10 10:13:07,711 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Merging Bind into Comprehension as 'select':
| Bind : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|   from s7: ...
|   select: Pure t18 : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|     value: StructNode : {s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}
|       s14: Path s7.ID : Int'
|       s15: Path s7.PLACEMENT : String'
|       s16: Path s7.BIDDER : String'
|       s17: Path s7.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:07,714 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Merged Bind into Comprehension as 'select':
| Comprehension s19, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|   from s19: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t18 : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|     value: StructNode : {s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}
|       s14: Path s19.ID : Int'
|       s15: Path s19.PLACEMENT : String'
|       s16: Path s19.BIDDER : String'
|       s17: Path s19.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function = : Boolean
|     0: Path s19.ID : Int'
|     1: LiteralNode 1 (volatileHint=false) : Int'

2019-10-10 10:13:07,715 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Replacements are: Map((t18,s14) -> s14, (t18,s15) -> s15, (t18,s16) -> s16, (t18,s17) -> s17)
2019-10-10 10:13:07,716 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-5 - Mappings are: ConstArray(((t18,s14),List(s14)), ((t18,s15),List(s15)), ((t18,s16),List(s16)), ((t18,s17),List(s17)))
2019-10-10 10:13:07,720 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]]
|   from s13: Comprehension s19, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|     from s19: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     select: Pure t18 : Vector[t18<{s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}>]
|       value: StructNode : {s14: Int', s15: String', s16: String', s17: java.time.LocalDateTime'}
|         s14: Path s19.ID : Int'
|         s15: Path s19.PLACEMENT : String'
|         s16: Path s19.BIDDER : String'
|         s17: Path s19.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Path s19.ID : Int'
|       1: LiteralNode 1 (volatileHint=false) : Int'
|   map: TypeMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|     0: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|       1: OptionApply : Option[Int']
|         0: Path s13.s14 : Int'
|       2: Path s13.s15 : String'
|       3: Path s13.s16 : String'
|       4: OptionApply : Option[java.time.LocalDateTime']
|         0: Path s13.s17 : java.time.LocalDateTime'

2019-10-10 10:13:07,722 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase optimizeScalar: (no change)
2019-10-10 10:13:07,723 [DEBUG] from slick.compiler.RemoveFieldNames in application-akka.actor.default-dispatcher-5 - Required symbols: s14 -> 0, s15 -> 1, s16 -> 2, s17 -> 3
2019-10-10 10:13:07,731 [DEBUG] from slick.compiler.RemoveFieldNames in application-akka.actor.default-dispatcher-5 - Transformed RSM: 
| ResultSetMapping
|   from s13: Comprehension s19, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t18<(Int', String', String', java.time.LocalDateTime')>]
|     from s19: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     select: Pure t18 : Vector[t18<(Int', String', String', java.time.LocalDateTime')>]
|       value: ProductNode : (Int', String', String', java.time.LocalDateTime')
|         1: Path s19.ID : Int'
|         2: Path s19.PLACEMENT : String'
|         3: Path s19.BIDDER : String'
|         4: Path s19.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Path s19.ID : Int'
|       1: LiteralNode 1 (volatileHint=false) : Int'
|   map: TypeMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|     0: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|       1: OptionApply : Option[Int']
|         0: Path s13.s14 : Int'
|       2: Path s13.s15 : String'
|       3: Path s13.s16 : String'
|       4: OptionApply : Option[java.time.LocalDateTime']
|         0: Path s13.s17 : java.time.LocalDateTime'

2019-10-10 10:13:07,735 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]]
|   from s13: Comprehension s19, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t18<(Int', String', String', java.time.LocalDateTime')>]
|     from s19: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     select: Pure t18 : Vector[t18<(Int', String', String', java.time.LocalDateTime')>]
|       value: ProductNode : (Int', String', String', java.time.LocalDateTime')
|         1: Path s19.ID : Int'
|         2: Path s19.PLACEMENT : String'
|         3: Path s19.BIDDER : String'
|         4: Path s19.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Path s19.ID : Int'
|       1: LiteralNode 1 (volatileHint=false) : Int'
|   map: TypeMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|     0: ProductNode : (Option[Int'], String', String', Option[java.time.LocalDateTime'])
|       1: OptionApply : Option[Int']
|         0: Path s13._1 : Int'
|       2: Path s13._2 : String'
|       3: Path s13._3 : String'
|       4: OptionApply : Option[java.time.LocalDateTime']
|         0: Path s13._4 : java.time.LocalDateTime'

2019-10-10 10:13:07,738 [DEBUG] from slick.compiler.CodeGen in application-akka.actor.default-dispatcher-5 - Compiling server-side and mapping with server-side:
| Comprehension s19, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t18<(Int', String', String', java.time.LocalDateTime')>]
|   from s19: Table IMPRESSION : Vector[@t6<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t18 : Vector[t18<(Int', String', String', java.time.LocalDateTime')>]
|     value: ProductNode : (Int', String', String', java.time.LocalDateTime')
|       1: Path s19.ID : Int'
|       2: Path s19.PLACEMENT : String'
|       3: Path s19.BIDDER : String'
|       4: Path s19.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function = : Boolean
|     0: Path s19.ID : Int'
|     1: LiteralNode 1 (volatileHint=false) : Int'

2019-10-10 10:13:07,769 [DEBUG] from slick.relational.ResultConverterCompiler in application-akka.actor.default-dispatcher-5 - Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: OptionResultConverter$mcI$sp idx=1 : Int'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: SpecializedJdbcResultConverter$$anon$2 idx=4 : java.time.LocalDateTime'

2019-10-10 10:13:07,770 [DEBUG] from slick.compiler.CodeGen in application-akka.actor.default-dispatcher-5 - Compiled server-side to:
| CompiledStatement "select "ID", "PLACEMENT", "BIDDER", "TIMEVAL" from "IMPRESSION" where "ID" = 1" : Vector[t18<(Int', String', String', java.time.LocalDateTime')>]

2019-10-10 10:13:07,771 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-5 - After phase codeGen:
| ResultSetMapping : Vector[Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]]
|   from s13: CompiledStatement "select "ID", "PLACEMENT", "BIDDER", "TIMEVAL" from "IMPRESSION" where "ID" = 1" : Vector[t18<(Int', String', String', java.time.LocalDateTime')>]
|   map: CompiledMapping : Mapped[(Option[Int'], String', String', Option[java.time.LocalDateTime'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: OptionResultConverter$mcI$sp idx=1 : Int'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: SpecializedJdbcResultConverter$$anon$2 idx=4 : java.time.LocalDateTime'

2019-10-10 10:13:07,772 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 - ------------------- Phase: Time ---------
2019-10-10 10:13:07,775 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -       assignUniqueSymbols:   11,112390 ms
2019-10-10 10:13:07,775 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -           unrollTailBinds:    1,460686 ms
2019-10-10 10:13:07,775 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -                inferTypes:    5,701554 ms
2019-10-10 10:13:07,775 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -              expandTables:   16,543218 ms
2019-10-10 10:13:07,775 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -           forceOuterBinds:    5,091007 ms
2019-10-10 10:13:07,775 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -         removeMappedTypes:    3,630688 ms
2019-10-10 10:13:07,775 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -                expandSums:    5,471120 ms
2019-10-10 10:13:07,775 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -         emulateOuterJoins:    0,969934 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -             expandRecords:    2,991018 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -        flattenProjections:   15,184145 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -              rewriteJoins:    0,850117 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -             verifySymbols:    2,170633 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -             relabelUnions:    1,357645 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -          createAggregates:    0,534691 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -           resolveZipJoins:    0,662364 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -          pruneProjections:    2,910034 ms
2019-10-10 10:13:07,776 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -           rewriteDistinct:    0,781939 ms
2019-10-10 10:13:07,777 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -    createResultSetMapping:    5,044730 ms
2019-10-10 10:13:07,777 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -            hoistClientOps:   11,931026 ms
2019-10-10 10:13:07,777 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -         reorderOperations:    2,010501 ms
2019-10-10 10:13:07,777 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -     mergeToComprehensions:   31,000202 ms
2019-10-10 10:13:07,777 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -            optimizeScalar:    2,042424 ms
2019-10-10 10:13:07,777 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -          removeFieldNames:   12,747000 ms
2019-10-10 10:13:07,777 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -                   codeGen:   36,688533 ms
2019-10-10 10:13:07,777 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-5 -                     TOTAL:  178,887599 ms
2019-10-10 10:13:07,785 [DEBUG] from slick.basic.BasicBackend.action in application-akka.actor.default-dispatcher-5 - #1: StreamingInvokerAction$HeadOptionAction [select "ID", "PLACEMENT", "BIDDER", "TIMEVAL" from "IMPRESSION" where "ID" = 1]
2019-10-10 10:13:07,798 [DEBUG] from slick.jdbc.JdbcBackend.statement in db-1 - Preparing statement: select "ID", "PLACEMENT", "BIDDER", "TIMEVAL" from "IMPRESSION" where "ID" = 1
2019-10-10 10:13:07,802 [DEBUG] from slick.jdbc.JdbcBackend.statement in db-1 - Executing prepared statement: HikariProxyPreparedStatement@1546915349 wrapping prep2: select "ID", "PLACEMENT", "BIDDER", "TIMEVAL" from "IMPRESSION" where "ID" = 1
2019-10-10 10:13:07,802 [DEBUG] from slick.jdbc.JdbcBackend.statementAndParameter in db-1 - Executing prepared statement: HikariProxyPreparedStatement@1546915349 wrapping prep2: select "ID", "PLACEMENT", "BIDDER", "TIMEVAL" from "IMPRESSION" where "ID" = 1
2019-10-10 10:13:07,804 [DEBUG] from slick.jdbc.JdbcBackend.benchmark in db-1 - Execution of prepared statement took 1ms
2019-10-10 10:13:07,823 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - /----+-----------+----------+----------------------\
2019-10-10 10:13:07,823 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - | 1  | 2         | 3        | 4                    |
2019-10-10 10:13:07,823 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - | ID | PLACEMENT | BIDDER   | TIMEVAL              |
2019-10-10 10:13:07,823 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - |----+-----------+----------+----------------------|
2019-10-10 10:13:07,823 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - | 1  | ABC123    | Appnexus | 2019-09-12 07:30:... |
2019-10-10 10:13:07,823 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - \----+-----------+----------+----------------------/
2019-10-10 10:13:08,075 [WARN] from akka.actor.ActorSystemImpl in play-dev-mode-akka.actor.default-dispatcher-3 - Explicitly set HTTP header 'Content-Type: application/json' is ignored, explicit `Content-Type` header is not allowed. Set `HttpResponse.entity.contentType` instead.
2019-10-10 10:13:26,978 [DEBUG] from akka.io.TcpListener in play-dev-mode-akka.actor.default-dispatcher-6 - New connection accepted
2019-10-10 10:13:27,135 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-3 - Performing phase [before-service-unbind] with [0] tasks
2019-10-10 10:13:27,136 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [service-unbind] with [0] tasks
2019-10-10 10:13:27,136 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [service-requests-done] with [0] tasks
2019-10-10 10:13:27,137 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [service-stop] with [1] tasks: [application-lifecycle-stophook]
2019-10-10 10:13:27,145 [INFO] from com.zaxxer.hikari.HikariDataSource in application-akka.actor.default-dispatcher-3 - db - Shutdown initiated...
2019-10-10 10:13:27,146 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in application-akka.actor.default-dispatcher-3 - db - Before shutdown stats (total=20, active=0, idle=20, waiting=0)
2019-10-10 10:13:27,147 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn0: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,147 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn1: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,147 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn2: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,147 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn3: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,148 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn4: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,148 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn5: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,149 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn6: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,150 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn7: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,150 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn8: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,150 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn9: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,150 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn10: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,151 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn11: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,151 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn12: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,151 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn13: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,152 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn14: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,152 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn15: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,152 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn16: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,152 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn17: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,153 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn18: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,153 [DEBUG] from com.zaxxer.hikari.pool.PoolBase in db connection closer - db - Closing connection conn19: url=jdbc:h2:mem:play user=: (connection evicted)
2019-10-10 10:13:27,155 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in application-akka.actor.default-dispatcher-3 - db - After shutdown stats (total=0, active=0, idle=0, waiting=0)
2019-10-10 10:13:27,155 [INFO] from com.zaxxer.hikari.HikariDataSource in application-akka.actor.default-dispatcher-3 - db - Shutdown completed.
2019-10-10 10:13:27,156 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [before-cluster-shutdown] with [0] tasks
2019-10-10 10:13:27,156 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [cluster-sharding-shutdown-region] with [0] tasks
2019-10-10 10:13:27,156 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [cluster-leave] with [0] tasks
2019-10-10 10:13:27,156 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [cluster-exiting] with [0] tasks
2019-10-10 10:13:27,156 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [cluster-exiting-done] with [0] tasks
2019-10-10 10:13:27,156 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [cluster-shutdown] with [0] tasks
2019-10-10 10:13:27,156 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [before-actor-system-terminate] with [1] tasks: [force-reload]
2019-10-10 10:13:27,156 [DEBUG] from akka.actor.CoordinatedShutdown in application-akka.actor.default-dispatcher-2 - Performing phase [actor-system-terminate] with [1] tasks: [terminate-system]
2019-10-10 10:13:27,159 [DEBUG] from akka.event.EventStream in application-akka.actor.default-dispatcher-3 - shutting down: StandardOutLogger
2019-10-10 10:13:27,321 [INFO] from akka.event.slf4j.Slf4jLogger in application-akka.actor.default-dispatcher-3 - Slf4jLogger started
2019-10-10 10:13:27,321 [DEBUG] from akka.event.EventStream in application-akka.actor.default-dispatcher-3 - logger log1-Slf4jLogger started
2019-10-10 10:13:27,321 [DEBUG] from akka.event.EventStream in application-akka.actor.default-dispatcher-3 - Default Loggers started
2019-10-10 10:13:27,338 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - Driver class org.h2.Driver found in Thread context class loader ReloadableClassLoader(v2){file:/Users/ldipotet/scala/server-side-test-master/target/scala-2.12/classes/}
2019-10-10 10:13:27,338 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - db - configuration:
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - allowPoolSuspension.............false
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - autoCommit......................true
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - catalog.........................none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - connectionInitSql...............none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - connectionTestQuery.............none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - connectionTimeout...............30000
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - dataSource......................none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - dataSourceClassName.............none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - dataSourceJNDI..................none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - dataSourceProperties............{password=<masked>}
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - driverClassName................."org.h2.Driver"
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - healthCheckProperties...........{}
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - healthCheckRegistry.............none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - idleTimeout.....................600000
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - initializationFailTimeout.......-1
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - isolateInternalQueries..........false
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - jdbcUrl.........................jdbc:h2:mem:play;DB_CLOSE_DELAY=-1
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - leakDetectionThreshold..........0
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - maxLifetime.....................1800000
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - maximumPoolSize.................20
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - metricRegistry..................none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - metricsTrackerFactory...........none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - minimumIdle.....................20
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - password........................<masked>
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - poolName........................"db"
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - readOnly........................false
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - registerMbeans..................false
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - scheduledExecutor...............none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - schema..........................none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - threadFactory...................internal
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - transactionIsolation............default
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - username........................none
2019-10-10 10:13:27,339 [DEBUG] from com.zaxxer.hikari.HikariConfig in play-dev-mode-akka.actor.default-dispatcher-7 - validationTimeout...............5000
2019-10-10 10:13:27,340 [INFO] from com.zaxxer.hikari.HikariDataSource in play-dev-mode-akka.actor.default-dispatcher-7 - db - Starting...
2019-10-10 10:13:27,340 [INFO] from com.zaxxer.hikari.HikariDataSource in play-dev-mode-akka.actor.default-dispatcher-7 - db - Start completed.
2019-10-10 10:13:27,341 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn20: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,341 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn21: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,360 [INFO] from play.api.http.EnabledFilters in play-dev-mode-akka.actor.default-dispatcher-7 - Enabled Filters (see <https://www.playframework.com/documentation/latest/Filters>):


2019-10-10 10:13:27,362 [INFO] from play.api.Play in play-dev-mode-akka.actor.default-dispatcher-7 - Application started (Dev) (no global state)
2019-10-10 10:13:27,381 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - Source:
| Apply Function count(*)
|   0: Filter s2
|     from s2: Bind
|       from s3: Filter s4
|         from s4: TableExpansion
|           table s5: Table IMPRESSION
|           columns: TypeMapping
|             0: ProductNode
|               1: OptionApply
|                 0: Path s5.ID : Int'
|               2: Path s5.PLACEMENT : String'
|               3: Path s5.BIDDER : String'
|               4: OptionApply
|                 0: Path s5.TIMEVAL : java.time.LocalDateTime'
|         where: Apply Function =
|           0: Path s4.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false)
|       select: Pure t6
|         value: Path s3.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function =
|       0: Ref s2
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false)

2019-10-10 10:13:27,381 [DEBUG] from slick.compiler.AssignUniqueSymbols in application-akka.actor.default-dispatcher-3 - Detected features: UsedFeatures(false,true,true,true)
2019-10-10 10:13:27,382 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: Filter s7
|     from s7: Bind
|       from s8: Filter s9
|         from s9: TableExpansion
|           table s10: Table IMPRESSION
|           columns: TypeMapping
|             0: ProductNode
|               1: OptionApply
|                 0: Path s10.ID : Int'
|               2: Path s10.PLACEMENT : String'
|               3: Path s10.BIDDER : String'
|               4: OptionApply
|                 0: Path s10.TIMEVAL : java.time.LocalDateTime'
|         where: Apply Function =
|           0: Path s9.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false)
|       select: Pure t12
|         value: Path s8.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function =
|       0: Ref s7
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false)

2019-10-10 10:13:27,382 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase unrollTailBinds: (no change)
2019-10-10 10:13:27,382 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase inferTypes: (no change)
2019-10-10 10:13:27,383 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-3 - Found Selects for NominalTypes: @(slick.jdbc.H2Profile$._.IMPRESSION)
2019-10-10 10:13:27,384 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-3 - With correct table types:
| Apply Function count(*) : Int
|   0: Filter s7 : Vector[t12<java.time.LocalDateTime'>]
|     from s7: Bind : Vector[t12<java.time.LocalDateTime'>]
|       from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         where: Apply Function = : Boolean
|           0: Path s9.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|       select: Pure t12 : Vector[t12<java.time.LocalDateTime'>]
|         value: Path s8.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Ref s7 : t12<java.time.LocalDateTime'>
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:27,384 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-3 - Table expansions: @t11 -> (s10,TypeMapping)
2019-10-10 10:13:27,385 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase expandTables:
| Apply Function count(*) : Int
|   0: Filter s7 : Vector[t12<java.time.LocalDateTime'>]
|     from s7: Bind : Vector[t12<java.time.LocalDateTime'>]
|       from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         where: Apply Function = : Boolean
|           0: Path s9.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|       select: Pure t12 : Vector[t12<java.time.LocalDateTime'>]
|         value: Path s8.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Ref s7 : t12<java.time.LocalDateTime'>
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:27,387 [DEBUG] from slick.compiler.ForceOuterBinds in application-akka.actor.default-dispatcher-3 - Introducing new Bind s13 for Filter s7
2019-10-10 10:13:27,387 [DEBUG] from slick.compiler.ForceOuterBinds in application-akka.actor.default-dispatcher-3 - Introducing new Bind s14 for Pure t15
2019-10-10 10:13:27,388 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase forceOuterBinds:
| First : t15<Int>
|   0: Bind : Vector[t15<Int>]
|     from s14: Pure t16 : Vector[t16<()>]
|       value: ProductNode : ()
|     select: Pure t15 : Vector[t15<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t17<t12<java.time.LocalDateTime'>>]
|           from s13: Filter s7 : Vector[t12<java.time.LocalDateTime'>]
|             from s7: Bind : Vector[t12<java.time.LocalDateTime'>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<java.time.LocalDateTime'>]
|                 value: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Ref s7 : t12<java.time.LocalDateTime'>
|               1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: Pure t17 : Vector[t17<t12<java.time.LocalDateTime'>>]
|             value: Ref s13 : t12<java.time.LocalDateTime'>

2019-10-10 10:13:27,388 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase removeMappedTypes: (no change)
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: () -> ()
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t16<()>] -> Vector[t16<()>]
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>] -> Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: @t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: String' -> String'
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: String' -> String'
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Boolean -> Boolean
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>] -> Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: @t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: java.time.LocalDateTime' -> java.time.LocalDateTime'
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t12<java.time.LocalDateTime'>] -> Vector[t12<java.time.LocalDateTime'>]
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t12<java.time.LocalDateTime'>] -> Vector[t12<java.time.LocalDateTime'>]
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: t12<java.time.LocalDateTime'> -> t12<java.time.LocalDateTime'>
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp'] -> MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Boolean -> Boolean
2019-10-10 10:13:27,389 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t12<java.time.LocalDateTime'>] -> Vector[t12<java.time.LocalDateTime'>]
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: t12<java.time.LocalDateTime'> -> t12<java.time.LocalDateTime'>
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t17<t12<java.time.LocalDateTime'>>] -> Vector[t17<t12<java.time.LocalDateTime'>>]
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t17<t12<java.time.LocalDateTime'>>] -> Vector[t17<t12<java.time.LocalDateTime'>>]
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Int -> Int
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t15<Int>] -> Vector[t15<Int>]
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t15<Int>] -> Vector[t15<Int>]
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: t15<Int> -> t15<Int>
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase expandSums: (no change)
2019-10-10 10:13:27,390 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase emulateOuterJoins: (no change)
2019-10-10 10:13:27,392 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase expandRecords:
| First : t15<Int>
|   0: Bind : Vector[t15<Int>]
|     from s14: Pure t16 : Vector[t16<()>]
|       value: ProductNode : ()
|     select: Pure t15 : Vector[t15<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t17<t12<java.time.LocalDateTime'>>]
|           from s13: Filter s7 : Vector[t12<java.time.LocalDateTime'>]
|             from s7: Bind : Vector[t12<java.time.LocalDateTime'>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<java.time.LocalDateTime'>]
|                 value: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Ref s7 : t12<java.time.LocalDateTime'>
|               1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: Pure t17 : Vector[t17<t12<java.time.LocalDateTime'>>]
|             value: Ref s13 : t12<java.time.LocalDateTime'>

2019-10-10 10:13:27,392 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening projection t16
2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening node at Path 
| ProductNode : ()

2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding translation for t16: (Map(), UnassignedType)
2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattened projection to
| Pure t16
|   value: StructNode

2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening projection t15
2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Analyzing s9.BIDDER with symbols t16
| Path s9.BIDDER : String'

2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Translated s9.BIDDER to:
| Path s9.BIDDER

2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening projection t12
2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Analyzing s8.TIMEVAL with symbols t16
| Path s8.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Translated s8.TIMEVAL to:
| Path s8.TIMEVAL

2019-10-10 10:13:27,393 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening node at Path 
| Path s8.TIMEVAL

2019-10-10 10:13:27,394 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding definition: s18 -> Path s8.TIMEVAL
2019-10-10 10:13:27,394 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding translation for t12: (Map(List() -> s18), UnassignedType)
2019-10-10 10:13:27,394 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattened projection to
| Pure t12
|   value: StructNode
|     s18: Path s8.TIMEVAL

2019-10-10 10:13:27,394 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Analyzing s7 with symbols t12, t16
| Ref s7 : t12<java.time.LocalDateTime'>

2019-10-10 10:13:27,395 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Found s7 with local part Path  over t12
2019-10-10 10:13:27,395 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 -   Translation for t12: Map(List() -> s18)
2019-10-10 10:13:27,395 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Translated s7 to:
| Path s7.s18

2019-10-10 10:13:27,395 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening projection t17
2019-10-10 10:13:27,395 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Analyzing s13 with symbols t12, t16
| Ref s13 : t12<java.time.LocalDateTime'>

2019-10-10 10:13:27,395 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Found s13 with local part Path  over t12
2019-10-10 10:13:27,395 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 -   Translation for t12: Map(List() -> s18)
2019-10-10 10:13:27,395 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Translated s13 to:
| Path s13.s18

2019-10-10 10:13:27,396 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening node at Path 
| Path s13.s18

2019-10-10 10:13:27,396 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding definition: s19 -> Path s13.s18
2019-10-10 10:13:27,396 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding translation for t17: (Map(List() -> s19), UnassignedType)
2019-10-10 10:13:27,396 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattened projection to
| Pure t17
|   value: StructNode
|     s19: Path s13.s18

2019-10-10 10:13:27,397 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s13: Filter s7
|       from s7: Bind
|         from s8: Filter s9
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function =
|             0: Path s9.BIDDER
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12
|           value: StructNode
|             s18: Path s8.TIMEVAL
|       where: Apply Function =
|         0: Path s7.s18
|         1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: Pure t17
|       value: StructNode
|         s19: Path s13.s18

2019-10-10 10:13:27,397 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding definition: s20 -> Apply Function count(*)
2019-10-10 10:13:27,397 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding translation for t15: (Map(List() -> s20), UnassignedType)
2019-10-10 10:13:27,399 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattened projection to
| Pure t15
|   value: StructNode
|     s20: Apply Function count(*)
|       0: Bind
|         from s13: Filter s7
|           from s7: Bind
|             from s8: Filter s9
|               from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               where: Apply Function =
|                 0: Path s9.BIDDER
|                 1: LiteralNode Appnexus (volatileHint=false) : String'
|             select: Pure t12
|               value: StructNode
|                 s18: Path s8.TIMEVAL
|           where: Apply Function =
|             0: Path s7.s18
|             1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|         select: Pure t17
|           value: StructNode
|             s19: Path s13.s18

2019-10-10 10:13:27,401 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase flattenProjections:
| First : t15<{s20: Int}>
|   0: Bind : Vector[t15<{s20: Int}>]
|     from s14: Pure t16 : Vector[t16<{}>]
|       value: StructNode : {}
|     select: Pure t15 : Vector[t15<{s20: Int}>]
|       value: StructNode : {s20: Int}
|         s20: Apply Function count(*) : Int
|           0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|             from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                   from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                   where: Apply Function = : Boolean
|                     0: Path s9.BIDDER : String'
|                     1: LiteralNode Appnexus (volatileHint=false) : String'
|                 select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                   value: StructNode : {s18: java.time.LocalDateTime'}
|                     s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|               where: Apply Function = : Boolean
|                 0: Path s7.s18 : java.time.LocalDateTime'
|                 1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|             select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|               value: StructNode : {s19: java.time.LocalDateTime'}
|                 s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:27,403 [DEBUG] from slick.compiler.RewriteJoins in application-akka.actor.default-dispatcher-3 - Inlining Pure 'from' in:
| Bind : Vector[t15<{s20: Int}>]
|   from s14: Pure t16 : Vector[t16<{}>]
|     value: StructNode : {}
|   select: Pure t15 : Vector[t15<{s20: Int}>]
|     value: StructNode : {s20: Int}
|       s20: Apply Function count(*) : Int
|         0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|           from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 value: StructNode : {s18: java.time.LocalDateTime'}
|                   s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Path s7.s18 : java.time.LocalDateTime'
|               1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|             value: StructNode : {s19: java.time.LocalDateTime'}
|               s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:27,406 [DEBUG] from slick.compiler.RewriteJoins in application-akka.actor.default-dispatcher-3 - Inlined Pure 'from' in:
| Bind : Vector[t15<{s20: Int}>]
|   from s14: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}
|   select: Pure t15 : Vector[t15<{s20: Int}>]
|     value: StructNode : {s20: Int}
|       s20: Apply Function count(*) : Int
|         0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|           from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 value: StructNode : {s18: java.time.LocalDateTime'}
|                   s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Path s7.s18 : java.time.LocalDateTime'
|               1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|             value: StructNode : {s19: java.time.LocalDateTime'}
|               s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:27,407 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase rewriteJoins:
| First : t15<{s20: Int}>
|   0: Bind : Vector[t15<{s20: Int}>]
|     from s14: Pure t21 : Vector[t21<{}>]
|       value: StructNode : {}
|     select: Pure t15 : Vector[t15<{s20: Int}>]
|       value: StructNode : {s20: Int}
|         s20: Apply Function count(*) : Int
|           0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|             from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                   from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                   where: Apply Function = : Boolean
|                     0: Path s9.BIDDER : String'
|                     1: LiteralNode Appnexus (volatileHint=false) : String'
|                 select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                   value: StructNode : {s18: java.time.LocalDateTime'}
|                     s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|               where: Apply Function = : Boolean
|                 0: Path s7.s18 : java.time.LocalDateTime'
|                 1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|             select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|               value: StructNode : {s19: java.time.LocalDateTime'}
|                 s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:27,407 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase verifySymbols: (no change)
2019-10-10 10:13:27,408 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase relabelUnions: (no change)
2019-10-10 10:13:27,412 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|     from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function = : Boolean
|             0: Path s9.BIDDER : String'
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           value: StructNode : {s18: java.time.LocalDateTime'}
|             s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|       where: Apply Function = : Boolean
|         0: Path s7.s18 : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|       value: StructNode : {s19: java.time.LocalDateTime'}
|         s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:27,415 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Converted aggregation function application
| Aggregate : Int
|   from s22: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|     from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function = : Boolean
|             0: Path s9.BIDDER : String'
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           value: StructNode : {s18: java.time.LocalDateTime'}
|             s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|       where: Apply Function = : Boolean
|         0: Path s7.s18 : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|       value: StructNode : {s19: java.time.LocalDateTime'}
|         s19: Path s13.s18 : java.time.LocalDateTime'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:27,416 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s22: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|     from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function = : Boolean
|             0: Path s9.BIDDER : String'
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           value: StructNode : {s18: java.time.LocalDateTime'}
|             s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|       where: Apply Function = : Boolean
|         0: Path s7.s18 : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|       value: StructNode : {s19: java.time.LocalDateTime'}
|         s19: Path s13.s18 : java.time.LocalDateTime'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:27,418 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         where: Apply Function = : Boolean
|           0: Path s9.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|       select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         value: StructNode : {s18: java.time.LocalDateTime'}
|           s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Path s7.s18 : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:27,421 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Lifting aggregates into join in:
| Bind : Vector[t15<{s20: Int}>]
|   from s14: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}
|   select: Pure t15 : Vector[t15<{s20: Int}>]
|     value: StructNode : {s20: Int}
|       s20: Aggregate : Int
|         from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               where: Apply Function = : Boolean
|                 0: Path s9.BIDDER : String'
|                 1: LiteralNode Appnexus (volatileHint=false) : String'
|             select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               value: StructNode : {s18: java.time.LocalDateTime'}
|                 s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|           where: Apply Function = : Boolean
|             0: Path s7.s18 : java.time.LocalDateTime'
|             1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:27,422 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - New mapping with temporary refs:
| StructNode : {s20: Int}
|   s20: Path s24.s23 : Int

2019-10-10 10:13:27,425 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - New 'from' with joined aggregates:
| Pure t25 : Vector[t25<{s23: Int}>]
|   value: Aggregate : {s23: Int}
|     from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function = : Boolean
|             0: Path s9.BIDDER : String'
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           value: StructNode : {s18: java.time.LocalDateTime'}
|             s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|       where: Apply Function = : Boolean
|         0: Path s7.s18 : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: StructNode : {s23: Int}
|       s23: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:27,426 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Replacement paths: Map(s24 -> List(s14))
2019-10-10 10:13:27,427 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Replacement path nodes: 
| StructNode
|   s24: Ref s14 : t25<{s23: Int}>

2019-10-10 10:13:27,429 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Lifted aggregates into join in:
| Bind : Vector[t15<{s20: Int}>]
|   from s14: Pure t25 : Vector[t25<{s23: Int}>]
|     value: Aggregate : {s23: Int}
|       from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|             from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|             where: Apply Function = : Boolean
|               0: Path s9.BIDDER : String'
|               1: LiteralNode Appnexus (volatileHint=false) : String'
|           select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             value: StructNode : {s18: java.time.LocalDateTime'}
|               s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|         where: Apply Function = : Boolean
|           0: Path s7.s18 : java.time.LocalDateTime'
|           1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|       select: StructNode : {s23: Int}
|         s23: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t15 : Vector[t15<{s20: Int}>]
|     value: StructNode : {s20: Int}
|       s20: Path s14.s23 : Int

2019-10-10 10:13:27,430 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase createAggregates:
| First : t15<{s20: Int}>
|   0: Bind : Vector[t15<{s20: Int}>]
|     from s14: Pure t25 : Vector[t25<{s23: Int}>]
|       value: Aggregate : {s23: Int}
|         from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               where: Apply Function = : Boolean
|                 0: Path s9.BIDDER : String'
|                 1: LiteralNode Appnexus (volatileHint=false) : String'
|             select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               value: StructNode : {s18: java.time.LocalDateTime'}
|                 s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|           where: Apply Function = : Boolean
|             0: Path s7.s18 : java.time.LocalDateTime'
|             1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|         select: StructNode : {s23: Int}
|           s23: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t15 : Vector[t15<{s20: Int}>]
|       value: StructNode : {s20: Int}
|         s20: Path s14.s23 : Int

2019-10-10 10:13:27,430 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase resolveZipJoins: (no change)
2019-10-10 10:13:27,430 [DEBUG] from slick.compiler.PruneProjections in application-akka.actor.default-dispatcher-3 - Unreferenced: t15; Field refs: (@t11,BIDDER), (@t11,TIMEVAL), (t25,s23), (t12,s18)
2019-10-10 10:13:27,431 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase pruneProjections: (no change)
2019-10-10 10:13:27,431 [DEBUG] from slick.compiler.RewriteDistinct in application-akka.actor.default-dispatcher-3 - No DISTINCT used as determined by assignUniqueSymbols - skipping phase
2019-10-10 10:13:27,431 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase rewriteDistinct: (no change)
2019-10-10 10:13:27,431 [DEBUG] from slick.compiler.CreateResultSetMapping in application-akka.actor.default-dispatcher-3 - Creating mapping from t15<Int>
2019-10-10 10:13:27,432 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: Bind : Vector[t15<{s20: Int}>]
|       from s14: Pure t25 : Vector[t25<{s23: Int}>]
|         value: Aggregate : {s23: Int}
|           from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 value: StructNode : {s18: java.time.LocalDateTime'}
|                   s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Path s7.s18 : java.time.LocalDateTime'
|               1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: StructNode : {s23: Int}
|             s23: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t15 : Vector[t15<{s20: Int}>]
|         value: StructNode : {s20: Int}
|           s20: Path s14.s23 : Int
|     map: Path s26.s20 : Int

2019-10-10 10:13:27,432 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-3 - Hoisting operations from defs: 
2019-10-10 10:13:27,432 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-3 - New defs: Map(0 -> (Path s14.s23,s27))
2019-10-10 10:13:27,433 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-3 - New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s26: Bind : Vector[t28<{s27: Int}>]
|     from s14: ...
|     select: Pure t28 : Vector[t28<{s27: Int}>]
|       value: StructNode : {s27: Int}
|         s27: Path s14.s23 : Int
|   map: Path s26.s27 : Int

2019-10-10 10:13:27,434 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: Bind : Vector[t28<{s27: Int}>]
|       from s14: Pure t25 : Vector[t25<{s23: Int}>]
|         value: Aggregate : {s23: Int}
|           from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 value: StructNode : {s18: java.time.LocalDateTime'}
|                   s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Path s7.s18 : java.time.LocalDateTime'
|               1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: StructNode : {s23: Int}
|             s23: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t28 : Vector[t28<{s27: Int}>]
|         value: StructNode : {s27: Int}
|           s27: Path s14.s23 : Int
|     map: Path s26.s27 : Int

2019-10-10 10:13:27,434 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase reorderOperations: (no change)
2019-10-10 10:13:27,434 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Table fields: Map(@t11 -> Vector(BIDDER, TIMEVAL))
2019-10-10 10:13:27,435 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Aggregate source into Comprehension:
| Pure t25 : Vector[t25<{s23: Int}>]
|   value: Aggregate : {s23: Int}
|     from s13: ...
|     select: StructNode : {s23: Int}
|       s23: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:27,435 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Creating source from TableNode:
| Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]

2019-10-10 10:13:27,435 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Mappings are: ConstArray(((@t11,BIDDER),List(BIDDER)), ((@t11,TIMEVAL),List(TIMEVAL)))
2019-10-10 10:13:27,435 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Building new Comprehension from:
| Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]

2019-10-10 10:13:27,436 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: java.time.LocalDateTime'}>]
|     value: StructNode : {s31: String', s32: java.time.LocalDateTime'}
|       s31: Path s29.BIDDER : String'
|       s32: Path s29.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:27,436 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Replacements are: Map((@t11,BIDDER) -> s31, (@t11,TIMEVAL) -> s32)
2019-10-10 10:13:27,436 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Filter into Comprehension:
| Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   from s9: ...
|   where: Apply Function = : Boolean
|     0: Path s9.BIDDER : String'
|     1: LiteralNode Appnexus (volatileHint=false) : String'

2019-10-10 10:13:27,436 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: java.time.LocalDateTime'}>]
|     value: StructNode : {s31: String', s32: java.time.LocalDateTime'}
|       s31: Path s29.BIDDER : String'
|       s32: Path s29.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function = : Boolean
|     0: Path s29.BIDDER : String'
|     1: LiteralNode Appnexus (volatileHint=false) : String'

2019-10-10 10:13:27,437 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s8: ...
|   select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     value: StructNode : {s18: java.time.LocalDateTime'}
|       s18: Path s8.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:27,437 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     value: StructNode : {s18: java.time.LocalDateTime'}
|       s18: Path s29.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function = : Boolean
|     0: Path s29.BIDDER : String'
|     1: LiteralNode Appnexus (volatileHint=false) : String'

2019-10-10 10:13:27,437 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Replacements are: Map((t12,s18) -> s18)
2019-10-10 10:13:27,437 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Filter into Comprehension:
| Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.s18 : java.time.LocalDateTime'
|     1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:27,438 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     value: StructNode : {s18: java.time.LocalDateTime'}
|       s18: Path s29.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:27,440 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - New source at this point is:
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     value: StructNode : {s18: java.time.LocalDateTime'}
|       s18: Path s29.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:27,440 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db housekeeper - db - Pool stats (total=2, active=0, idle=2, waiting=0)
2019-10-10 10:13:27,441 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn22: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,441 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn23: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,441 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn24: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,442 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn25: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,442 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn26: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,442 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Aggregate source into Comprehension:
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t25<{s23: Int}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t25 : Vector[t25<{s23: Int}>]
|     value: StructNode : {s23: Int}
|       s23: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:27,442 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn27: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,442 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn28: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,442 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn29: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,442 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn30: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,443 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn31: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,443 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Replacements are: Map((t25,s23) -> s23)
2019-10-10 10:13:27,443 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn32: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,443 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn33: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,443 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s27: Int}>]
|   from s14: ...
|   select: Pure t28 : Vector[t28<{s27: Int}>]
|     value: StructNode : {s27: Int}
|       s27: Path s14.s23 : Int

2019-10-10 10:13:27,443 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn34: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,443 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn35: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,444 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn36: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,444 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn37: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,444 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn38: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,444 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - Added connection conn39: url=jdbc:h2:mem:play user=
2019-10-10 10:13:27,444 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db connection adder - db - After adding stats (total=20, active=0, idle=20, waiting=0)
2019-10-10 10:13:27,445 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: Int}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t28 : Vector[t28<{s27: Int}>]
|     value: StructNode : {s27: Int}
|       s27: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:27,445 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Replacements are: Map((t28,s27) -> s27)
2019-10-10 10:13:27,445 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Mappings are: ConstArray(((t28,s27),List(s27)))
2019-10-10 10:13:27,446 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: Int}>]
|       from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|       select: Pure t28 : Vector[t28<{s27: Int}>]
|         value: StructNode : {s27: Int}
|           s27: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|       where: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s29.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|         1: Apply Function = : Boolean
|           0: Path s29.TIMEVAL : java.time.LocalDateTime'
|           1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     map: Path s26.s27 : Int

2019-10-10 10:13:27,446 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase optimizeScalar: (no change)
2019-10-10 10:13:27,446 [DEBUG] from slick.compiler.RemoveFieldNames in application-akka.actor.default-dispatcher-3 - Required symbols: s27 -> 0
2019-10-10 10:13:27,448 [DEBUG] from slick.compiler.RemoveFieldNames in application-akka.actor.default-dispatcher-3 - Transformed RSM: 
| ResultSetMapping
|   from s26: Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<(Int)>]
|     from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     select: Pure t28 : Vector[t28<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s29.BIDDER : String'
|         1: LiteralNode Appnexus (volatileHint=false) : String'
|       1: Apply Function = : Boolean
|         0: Path s29.TIMEVAL : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|   map: Path s26.s27 : Int

2019-10-10 10:13:27,449 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<(Int)>]
|       from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|       select: Pure t28 : Vector[t28<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|       where: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s29.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|         1: Apply Function = : Boolean
|           0: Path s29.TIMEVAL : java.time.LocalDateTime'
|           1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     map: Path s26._1 : Int

2019-10-10 10:13:27,450 [DEBUG] from slick.compiler.CodeGen in application-akka.actor.default-dispatcher-3 - Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<(Int)>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t28 : Vector[t28<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:27,454 [DEBUG] from slick.relational.ResultConverterCompiler in application-akka.actor.default-dispatcher-3 - Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

2019-10-10 10:13:27,454 [DEBUG] from slick.compiler.CodeGen in application-akka.actor.default-dispatcher-3 - Compiled server-side to:
| CompiledStatement "select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" = {ts '2019-09-12 07:30:00.0'})" : Vector[t28<(Int)>]

2019-10-10 10:13:27,455 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: CompiledStatement "select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" = {ts '2019-09-12 07:30:00.0'})" : Vector[t28<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

2019-10-10 10:13:27,455 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 - ------------------- Phase: Time ---------
2019-10-10 10:13:27,455 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -       assignUniqueSymbols:    1,496299 ms
2019-10-10 10:13:27,455 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -           unrollTailBinds:    0,079018 ms
2019-10-10 10:13:27,455 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -                inferTypes:    0,194197 ms
2019-10-10 10:13:27,455 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -              expandTables:    2,676719 ms
2019-10-10 10:13:27,455 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -           forceOuterBinds:    3,151865 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -         removeMappedTypes:    0,231100 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -                expandSums:    1,323425 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -         emulateOuterJoins:    0,706646 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -             expandRecords:    1,406344 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -        flattenProjections:    9,064289 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -              rewriteJoins:    6,388713 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -             verifySymbols:    0,094382 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -             relabelUnions:    0,113227 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -          createAggregates:   22,137172 ms
2019-10-10 10:13:27,456 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -           resolveZipJoins:    0,125236 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -          pruneProjections:    0,750631 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -           rewriteDistinct:    0,024010 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -    createResultSetMapping:    1,129730 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -            hoistClientOps:    2,050891 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -         reorderOperations:    0,087935 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -     mergeToComprehensions:   12,073445 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -            optimizeScalar:    0,126712 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -          removeFieldNames:    3,068077 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -                   codeGen:    5,574709 ms
2019-10-10 10:13:27,457 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -                     TOTAL:   74,074772 ms
2019-10-10 10:13:27,459 [DEBUG] from slick.basic.BasicBackend.action in application-akka.actor.default-dispatcher-3 - #1: result [select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" = {ts '2019-09-12 07:30:00.0'})]
2019-10-10 10:13:27,460 [DEBUG] from slick.jdbc.JdbcBackend.statement in db-1 - Preparing statement: select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" = {ts '2019-09-12 07:30:00.0'})
2019-10-10 10:13:27,461 [DEBUG] from slick.jdbc.JdbcBackend.statement in db-1 - Executing prepared statement: HikariProxyPreparedStatement@1497451164 wrapping prep3: select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" =  ts '2019-09-12 07:30:00.0' )
2019-10-10 10:13:27,461 [DEBUG] from slick.jdbc.JdbcBackend.statementAndParameter in db-1 - Executing prepared statement: HikariProxyPreparedStatement@1497451164 wrapping prep3: select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" =  ts '2019-09-12 07:30:00.0' )
2019-10-10 10:13:27,464 [DEBUG] from slick.jdbc.JdbcBackend.benchmark in db-1 - Execution of prepared statement took 2ms
2019-10-10 10:13:27,465 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - /----------\
2019-10-10 10:13:27,465 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - | 1        |
2019-10-10 10:13:27,465 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - | COUNT(1) |
2019-10-10 10:13:27,465 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - |----------|
2019-10-10 10:13:27,465 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - | 1        |
2019-10-10 10:13:27,465 [DEBUG] from slick.jdbc.StatementInvoker.result in db-1 - \----------/
2019-10-10 10:13:27,468 [WARN] from akka.actor.ActorSystemImpl in play-dev-mode-akka.actor.default-dispatcher-3 - Explicitly set HTTP header 'Content-Type: application/json' is ignored, explicit `Content-Type` header is not allowed. Set `HttpResponse.entity.contentType` instead.
2019-10-10 10:13:35,993 [DEBUG] from akka.io.TcpListener in play-dev-mode-akka.actor.default-dispatcher-7 - New connection accepted
2019-10-10 10:13:35,998 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - Source:
| Apply Function count(*)
|   0: Filter s2
|     from s2: Bind
|       from s3: Filter s4
|         from s4: TableExpansion
|           table s5: Table IMPRESSION
|           columns: TypeMapping
|             0: ProductNode
|               1: OptionApply
|                 0: Path s5.ID : Int'
|               2: Path s5.PLACEMENT : String'
|               3: Path s5.BIDDER : String'
|               4: OptionApply
|                 0: Path s5.TIMEVAL : java.time.LocalDateTime'
|         where: Apply Function =
|           0: Path s4.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false)
|       select: Pure t6
|         value: Path s3.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function =
|       0: Ref s2
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false)

2019-10-10 10:13:35,998 [DEBUG] from slick.compiler.AssignUniqueSymbols in application-akka.actor.default-dispatcher-3 - Detected features: UsedFeatures(false,true,true,true)
2019-10-10 10:13:35,999 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: Filter s7
|     from s7: Bind
|       from s8: Filter s9
|         from s9: TableExpansion
|           table s10: Table IMPRESSION
|           columns: TypeMapping
|             0: ProductNode
|               1: OptionApply
|                 0: Path s10.ID : Int'
|               2: Path s10.PLACEMENT : String'
|               3: Path s10.BIDDER : String'
|               4: OptionApply
|                 0: Path s10.TIMEVAL : java.time.LocalDateTime'
|         where: Apply Function =
|           0: Path s9.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false)
|       select: Pure t12
|         value: Path s8.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function =
|       0: Ref s7
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false)

2019-10-10 10:13:35,999 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase unrollTailBinds: (no change)
2019-10-10 10:13:35,999 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase inferTypes: (no change)
2019-10-10 10:13:36,000 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-3 - Found Selects for NominalTypes: @(slick.jdbc.H2Profile$._.IMPRESSION)
2019-10-10 10:13:36,001 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-3 - With correct table types:
| Apply Function count(*) : Int
|   0: Filter s7 : Vector[t12<java.time.LocalDateTime'>]
|     from s7: Bind : Vector[t12<java.time.LocalDateTime'>]
|       from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         where: Apply Function = : Boolean
|           0: Path s9.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|       select: Pure t12 : Vector[t12<java.time.LocalDateTime'>]
|         value: Path s8.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Ref s7 : t12<java.time.LocalDateTime'>
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:36,001 [DEBUG] from slick.compiler.ExpandTables in application-akka.actor.default-dispatcher-3 - Table expansions: @t11 -> (s10,TypeMapping)
2019-10-10 10:13:36,001 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase expandTables:
| Apply Function count(*) : Int
|   0: Filter s7 : Vector[t12<java.time.LocalDateTime'>]
|     from s7: Bind : Vector[t12<java.time.LocalDateTime'>]
|       from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         where: Apply Function = : Boolean
|           0: Path s9.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|       select: Pure t12 : Vector[t12<java.time.LocalDateTime'>]
|         value: Path s8.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Ref s7 : t12<java.time.LocalDateTime'>
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:36,001 [DEBUG] from slick.compiler.ForceOuterBinds in application-akka.actor.default-dispatcher-3 - Introducing new Bind s13 for Filter s7
2019-10-10 10:13:36,001 [DEBUG] from slick.compiler.ForceOuterBinds in application-akka.actor.default-dispatcher-3 - Introducing new Bind s14 for Pure t15
2019-10-10 10:13:36,002 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase forceOuterBinds:
| First : t15<Int>
|   0: Bind : Vector[t15<Int>]
|     from s14: Pure t16 : Vector[t16<()>]
|       value: ProductNode : ()
|     select: Pure t15 : Vector[t15<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t17<t12<java.time.LocalDateTime'>>]
|           from s13: Filter s7 : Vector[t12<java.time.LocalDateTime'>]
|             from s7: Bind : Vector[t12<java.time.LocalDateTime'>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<java.time.LocalDateTime'>]
|                 value: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Ref s7 : t12<java.time.LocalDateTime'>
|               1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: Pure t17 : Vector[t17<t12<java.time.LocalDateTime'>>]
|             value: Ref s13 : t12<java.time.LocalDateTime'>

2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase removeMappedTypes: (no change)
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: () -> ()
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t16<()>] -> Vector[t16<()>]
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>] -> Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: @t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: String' -> String'
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: String' -> String'
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Boolean -> Boolean
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>] -> Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: @t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}> -> @t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: java.time.LocalDateTime' -> java.time.LocalDateTime'
2019-10-10 10:13:36,003 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t12<java.time.LocalDateTime'>] -> Vector[t12<java.time.LocalDateTime'>]
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t12<java.time.LocalDateTime'>] -> Vector[t12<java.time.LocalDateTime'>]
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: t12<java.time.LocalDateTime'> -> t12<java.time.LocalDateTime'>
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp'] -> MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Boolean -> Boolean
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t12<java.time.LocalDateTime'>] -> Vector[t12<java.time.LocalDateTime'>]
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: t12<java.time.LocalDateTime'> -> t12<java.time.LocalDateTime'>
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t17<t12<java.time.LocalDateTime'>>] -> Vector[t17<t12<java.time.LocalDateTime'>>]
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t17<t12<java.time.LocalDateTime'>>] -> Vector[t17<t12<java.time.LocalDateTime'>>]
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Int -> Int
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t15<Int>] -> Vector[t15<Int>]
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: Vector[t15<Int>] -> Vector[t15<Int>]
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.ExpandSums in application-akka.actor.default-dispatcher-3 - Translated type: t15<Int> -> t15<Int>
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase expandSums: (no change)
2019-10-10 10:13:36,004 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase emulateOuterJoins: (no change)
2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase expandRecords:
| First : t15<Int>
|   0: Bind : Vector[t15<Int>]
|     from s14: Pure t16 : Vector[t16<()>]
|       value: ProductNode : ()
|     select: Pure t15 : Vector[t15<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t17<t12<java.time.LocalDateTime'>>]
|           from s13: Filter s7 : Vector[t12<java.time.LocalDateTime'>]
|             from s7: Bind : Vector[t12<java.time.LocalDateTime'>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<java.time.LocalDateTime'>]
|                 value: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Ref s7 : t12<java.time.LocalDateTime'>
|               1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: Pure t17 : Vector[t17<t12<java.time.LocalDateTime'>>]
|             value: Ref s13 : t12<java.time.LocalDateTime'>

2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening projection t16
2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening node at Path 
| ProductNode : ()

2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding translation for t16: (Map(), UnassignedType)
2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattened projection to
| Pure t16
|   value: StructNode

2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening projection t15
2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Analyzing s9.BIDDER with symbols t16
| Path s9.BIDDER : String'

2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Translated s9.BIDDER to:
| Path s9.BIDDER

2019-10-10 10:13:36,005 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening projection t12
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Analyzing s8.TIMEVAL with symbols t16
| Path s8.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Translated s8.TIMEVAL to:
| Path s8.TIMEVAL

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening node at Path 
| Path s8.TIMEVAL

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding definition: s18 -> Path s8.TIMEVAL
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding translation for t12: (Map(List() -> s18), UnassignedType)
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattened projection to
| Pure t12
|   value: StructNode
|     s18: Path s8.TIMEVAL

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Analyzing s7 with symbols t16, t12
| Ref s7 : t12<java.time.LocalDateTime'>

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Found s7 with local part Path  over t12
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 -   Translation for t12: Map(List() -> s18)
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Translated s7 to:
| Path s7.s18

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening projection t17
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Analyzing s13 with symbols t16, t12
| Ref s13 : t12<java.time.LocalDateTime'>

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Found s13 with local part Path  over t12
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 -   Translation for t12: Map(List() -> s18)
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Translated s13 to:
| Path s13.s18

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening node at Path 
| Path s13.s18

2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding definition: s19 -> Path s13.s18
2019-10-10 10:13:36,006 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding translation for t17: (Map(List() -> s19), UnassignedType)
2019-10-10 10:13:36,007 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattened projection to
| Pure t17
|   value: StructNode
|     s19: Path s13.s18

2019-10-10 10:13:36,007 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s13: Filter s7
|       from s7: Bind
|         from s8: Filter s9
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function =
|             0: Path s9.BIDDER
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12
|           value: StructNode
|             s18: Path s8.TIMEVAL
|       where: Apply Function =
|         0: Path s7.s18
|         1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: Pure t17
|       value: StructNode
|         s19: Path s13.s18

2019-10-10 10:13:36,007 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding definition: s20 -> Apply Function count(*)
2019-10-10 10:13:36,007 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Adding translation for t15: (Map(List() -> s20), UnassignedType)
2019-10-10 10:13:36,008 [DEBUG] from slick.compiler.FlattenProjections in application-akka.actor.default-dispatcher-3 - Flattened projection to
| Pure t15
|   value: StructNode
|     s20: Apply Function count(*)
|       0: Bind
|         from s13: Filter s7
|           from s7: Bind
|             from s8: Filter s9
|               from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               where: Apply Function =
|                 0: Path s9.BIDDER
|                 1: LiteralNode Appnexus (volatileHint=false) : String'
|             select: Pure t12
|               value: StructNode
|                 s18: Path s8.TIMEVAL
|           where: Apply Function =
|             0: Path s7.s18
|             1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|         select: Pure t17
|           value: StructNode
|             s19: Path s13.s18

2019-10-10 10:13:36,009 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase flattenProjections:
| First : t15<{s20: Int}>
|   0: Bind : Vector[t15<{s20: Int}>]
|     from s14: Pure t16 : Vector[t16<{}>]
|       value: StructNode : {}
|     select: Pure t15 : Vector[t15<{s20: Int}>]
|       value: StructNode : {s20: Int}
|         s20: Apply Function count(*) : Int
|           0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|             from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                   from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                   where: Apply Function = : Boolean
|                     0: Path s9.BIDDER : String'
|                     1: LiteralNode Appnexus (volatileHint=false) : String'
|                 select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                   value: StructNode : {s18: java.time.LocalDateTime'}
|                     s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|               where: Apply Function = : Boolean
|                 0: Path s7.s18 : java.time.LocalDateTime'
|                 1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|             select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|               value: StructNode : {s19: java.time.LocalDateTime'}
|                 s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:36,009 [DEBUG] from slick.compiler.RewriteJoins in application-akka.actor.default-dispatcher-3 - Inlining Pure 'from' in:
| Bind : Vector[t15<{s20: Int}>]
|   from s14: Pure t16 : Vector[t16<{}>]
|     value: StructNode : {}
|   select: Pure t15 : Vector[t15<{s20: Int}>]
|     value: StructNode : {s20: Int}
|       s20: Apply Function count(*) : Int
|         0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|           from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 value: StructNode : {s18: java.time.LocalDateTime'}
|                   s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Path s7.s18 : java.time.LocalDateTime'
|               1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|             value: StructNode : {s19: java.time.LocalDateTime'}
|               s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:36,010 [DEBUG] from slick.compiler.RewriteJoins in application-akka.actor.default-dispatcher-3 - Inlined Pure 'from' in:
| Bind : Vector[t15<{s20: Int}>]
|   from s14: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}
|   select: Pure t15 : Vector[t15<{s20: Int}>]
|     value: StructNode : {s20: Int}
|       s20: Apply Function count(*) : Int
|         0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|           from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 value: StructNode : {s18: java.time.LocalDateTime'}
|                   s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Path s7.s18 : java.time.LocalDateTime'
|               1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|             value: StructNode : {s19: java.time.LocalDateTime'}
|               s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:36,011 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase rewriteJoins:
| First : t15<{s20: Int}>
|   0: Bind : Vector[t15<{s20: Int}>]
|     from s14: Pure t21 : Vector[t21<{}>]
|       value: StructNode : {}
|     select: Pure t15 : Vector[t15<{s20: Int}>]
|       value: StructNode : {s20: Int}
|         s20: Apply Function count(*) : Int
|           0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|             from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                   from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                   where: Apply Function = : Boolean
|                     0: Path s9.BIDDER : String'
|                     1: LiteralNode Appnexus (volatileHint=false) : String'
|                 select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                   value: StructNode : {s18: java.time.LocalDateTime'}
|                     s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|               where: Apply Function = : Boolean
|                 0: Path s7.s18 : java.time.LocalDateTime'
|                 1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|             select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|               value: StructNode : {s19: java.time.LocalDateTime'}
|                 s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:36,012 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase verifySymbols: (no change)
2019-10-10 10:13:36,012 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase relabelUnions: (no change)
2019-10-10 10:13:36,013 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|     from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function = : Boolean
|             0: Path s9.BIDDER : String'
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           value: StructNode : {s18: java.time.LocalDateTime'}
|             s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|       where: Apply Function = : Boolean
|         0: Path s7.s18 : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|       value: StructNode : {s19: java.time.LocalDateTime'}
|         s19: Path s13.s18 : java.time.LocalDateTime'

2019-10-10 10:13:36,014 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Converted aggregation function application
| Aggregate : Int
|   from s22: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|     from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function = : Boolean
|             0: Path s9.BIDDER : String'
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           value: StructNode : {s18: java.time.LocalDateTime'}
|             s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|       where: Apply Function = : Boolean
|         0: Path s7.s18 : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|       value: StructNode : {s19: java.time.LocalDateTime'}
|         s19: Path s13.s18 : java.time.LocalDateTime'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:36,014 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s22: Bind : Vector[t17<{s19: java.time.LocalDateTime'}>]
|     from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function = : Boolean
|             0: Path s9.BIDDER : String'
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           value: StructNode : {s18: java.time.LocalDateTime'}
|             s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|       where: Apply Function = : Boolean
|         0: Path s7.s18 : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: Pure t17 : Vector[t17<{s19: java.time.LocalDateTime'}>]
|       value: StructNode : {s19: java.time.LocalDateTime'}
|         s19: Path s13.s18 : java.time.LocalDateTime'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:36,015 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|         where: Apply Function = : Boolean
|           0: Path s9.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|       select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         value: StructNode : {s18: java.time.LocalDateTime'}
|           s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|     where: Apply Function = : Boolean
|       0: Path s7.s18 : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:36,017 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Lifting aggregates into join in:
| Bind : Vector[t15<{s20: Int}>]
|   from s14: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}
|   select: Pure t15 : Vector[t15<{s20: Int}>]
|     value: StructNode : {s20: Int}
|       s20: Aggregate : Int
|         from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               where: Apply Function = : Boolean
|                 0: Path s9.BIDDER : String'
|                 1: LiteralNode Appnexus (volatileHint=false) : String'
|             select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               value: StructNode : {s18: java.time.LocalDateTime'}
|                 s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|           where: Apply Function = : Boolean
|             0: Path s7.s18 : java.time.LocalDateTime'
|             1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:36,017 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - New mapping with temporary refs:
| StructNode : {s20: Int}
|   s20: Path s24.s23 : Int

2019-10-10 10:13:36,017 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - New 'from' with joined aggregates:
| Pure t25 : Vector[t25<{s23: Int}>]
|   value: Aggregate : {s23: Int}
|     from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|       from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|           where: Apply Function = : Boolean
|             0: Path s9.BIDDER : String'
|             1: LiteralNode Appnexus (volatileHint=false) : String'
|         select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           value: StructNode : {s18: java.time.LocalDateTime'}
|             s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|       where: Apply Function = : Boolean
|         0: Path s7.s18 : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     select: StructNode : {s23: Int}
|       s23: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:36,017 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Replacement paths: Map(s24 -> List(s14))
2019-10-10 10:13:36,018 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Replacement path nodes: 
| StructNode
|   s24: Ref s14 : t25<{s23: Int}>

2019-10-10 10:13:36,018 [DEBUG] from slick.compiler.CreateAggregates in application-akka.actor.default-dispatcher-3 - Lifted aggregates into join in:
| Bind : Vector[t15<{s20: Int}>]
|   from s14: Pure t25 : Vector[t25<{s23: Int}>]
|     value: Aggregate : {s23: Int}
|       from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|         from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|             from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|             where: Apply Function = : Boolean
|               0: Path s9.BIDDER : String'
|               1: LiteralNode Appnexus (volatileHint=false) : String'
|           select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             value: StructNode : {s18: java.time.LocalDateTime'}
|               s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|         where: Apply Function = : Boolean
|           0: Path s7.s18 : java.time.LocalDateTime'
|           1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|       select: StructNode : {s23: Int}
|         s23: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t15 : Vector[t15<{s20: Int}>]
|     value: StructNode : {s20: Int}
|       s20: Path s14.s23 : Int

2019-10-10 10:13:36,019 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase createAggregates:
| First : t15<{s20: Int}>
|   0: Bind : Vector[t15<{s20: Int}>]
|     from s14: Pure t25 : Vector[t25<{s23: Int}>]
|       value: Aggregate : {s23: Int}
|         from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|           from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|               where: Apply Function = : Boolean
|                 0: Path s9.BIDDER : String'
|                 1: LiteralNode Appnexus (volatileHint=false) : String'
|             select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               value: StructNode : {s18: java.time.LocalDateTime'}
|                 s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|           where: Apply Function = : Boolean
|             0: Path s7.s18 : java.time.LocalDateTime'
|             1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|         select: StructNode : {s23: Int}
|           s23: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t15 : Vector[t15<{s20: Int}>]
|       value: StructNode : {s20: Int}
|         s20: Path s14.s23 : Int

2019-10-10 10:13:36,019 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase resolveZipJoins: (no change)
2019-10-10 10:13:36,019 [DEBUG] from slick.compiler.PruneProjections in application-akka.actor.default-dispatcher-3 - Unreferenced: t15; Field refs: (@t11,BIDDER), (t12,s18), (t25,s23), (@t11,TIMEVAL)
2019-10-10 10:13:36,019 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase pruneProjections: (no change)
2019-10-10 10:13:36,019 [DEBUG] from slick.compiler.RewriteDistinct in application-akka.actor.default-dispatcher-3 - No DISTINCT used as determined by assignUniqueSymbols - skipping phase
2019-10-10 10:13:36,019 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase rewriteDistinct: (no change)
2019-10-10 10:13:36,019 [DEBUG] from slick.compiler.CreateResultSetMapping in application-akka.actor.default-dispatcher-3 - Creating mapping from t15<Int>
2019-10-10 10:13:36,020 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: Bind : Vector[t15<{s20: Int}>]
|       from s14: Pure t25 : Vector[t25<{s23: Int}>]
|         value: Aggregate : {s23: Int}
|           from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 value: StructNode : {s18: java.time.LocalDateTime'}
|                   s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Path s7.s18 : java.time.LocalDateTime'
|               1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: StructNode : {s23: Int}
|             s23: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t15 : Vector[t15<{s20: Int}>]
|         value: StructNode : {s20: Int}
|           s20: Path s14.s23 : Int
|     map: Path s26.s20 : Int

2019-10-10 10:13:36,020 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-3 - Hoisting operations from defs: 
2019-10-10 10:13:36,020 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-3 - New defs: Map(0 -> (Path s14.s23,s27))
2019-10-10 10:13:36,021 [DEBUG] from slick.compiler.HoistClientOps in application-akka.actor.default-dispatcher-3 - New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s26: Bind : Vector[t28<{s27: Int}>]
|     from s14: ...
|     select: Pure t28 : Vector[t28<{s27: Int}>]
|       value: StructNode : {s27: Int}
|         s27: Path s14.s23 : Int
|   map: Path s26.s27 : Int

2019-10-10 10:13:36,022 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: Bind : Vector[t28<{s27: Int}>]
|       from s14: Pure t25 : Vector[t25<{s23: Int}>]
|         value: Aggregate : {s23: Int}
|           from s13: Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|             from s7: Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|               from s8: Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 from s9: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s9.BIDDER : String'
|                   1: LiteralNode Appnexus (volatileHint=false) : String'
|               select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|                 value: StructNode : {s18: java.time.LocalDateTime'}
|                   s18: Path s8.TIMEVAL : java.time.LocalDateTime'
|             where: Apply Function = : Boolean
|               0: Path s7.s18 : java.time.LocalDateTime'
|               1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|           select: StructNode : {s23: Int}
|             s23: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t28 : Vector[t28<{s27: Int}>]
|         value: StructNode : {s27: Int}
|           s27: Path s14.s23 : Int
|     map: Path s26.s27 : Int

2019-10-10 10:13:36,022 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase reorderOperations: (no change)
2019-10-10 10:13:36,022 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Table fields: Map(@t11 -> Vector(BIDDER, TIMEVAL))
2019-10-10 10:13:36,022 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Aggregate source into Comprehension:
| Pure t25 : Vector[t25<{s23: Int}>]
|   value: Aggregate : {s23: Int}
|     from s13: ...
|     select: StructNode : {s23: Int}
|       s23: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

2019-10-10 10:13:36,022 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Creating source from TableNode:
| Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]

2019-10-10 10:13:36,022 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Mappings are: ConstArray(((@t11,BIDDER),List(BIDDER)), ((@t11,TIMEVAL),List(TIMEVAL)))
2019-10-10 10:13:36,022 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Building new Comprehension from:
| Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]

2019-10-10 10:13:36,023 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Built new Comprehension:
| Comprehension s29, None, None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: java.time.LocalDateTime'}>]
|     value: StructNode : {s31: String', s32: java.time.LocalDateTime'}
|       s31: Path s29.BIDDER : String'
|       s32: Path s29.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:36,023 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Replacements are: Map((@t11,BIDDER) -> s31, (@t11,TIMEVAL) -> s32)
2019-10-10 10:13:36,023 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Filter into Comprehension:
| Filter s9 : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   from s9: ...
|   where: Apply Function = : Boolean
|     0: Path s9.BIDDER : String'
|     1: LiteralNode Appnexus (volatileHint=false) : String'

2019-10-10 10:13:36,024 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s31: String', s32: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t30 : Vector[t30<{s31: String', s32: java.time.LocalDateTime'}>]
|     value: StructNode : {s31: String', s32: java.time.LocalDateTime'}
|       s31: Path s29.BIDDER : String'
|       s32: Path s29.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function = : Boolean
|     0: Path s29.BIDDER : String'
|     1: LiteralNode Appnexus (volatileHint=false) : String'

2019-10-10 10:13:36,024 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s8: ...
|   select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     value: StructNode : {s18: java.time.LocalDateTime'}
|       s18: Path s8.TIMEVAL : java.time.LocalDateTime'

2019-10-10 10:13:36,025 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     value: StructNode : {s18: java.time.LocalDateTime'}
|       s18: Path s29.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function = : Boolean
|     0: Path s29.BIDDER : String'
|     1: LiteralNode Appnexus (volatileHint=false) : String'

2019-10-10 10:13:36,025 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Replacements are: Map((t12,s18) -> s18)
2019-10-10 10:13:36,025 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Filter into Comprehension:
| Filter s7 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s7: ...
|   where: Apply Function = : Boolean
|     0: Path s7.s18 : java.time.LocalDateTime'
|     1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:36,026 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Filter into Comprehension:
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     value: StructNode : {s18: java.time.LocalDateTime'}
|       s18: Path s29.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:36,027 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - New source at this point is:
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t12<{s18: java.time.LocalDateTime'}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t12 : Vector[t12<{s18: java.time.LocalDateTime'}>]
|     value: StructNode : {s18: java.time.LocalDateTime'}
|       s18: Path s29.TIMEVAL : java.time.LocalDateTime'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:36,028 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Aggregate source into Comprehension:
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t25<{s23: Int}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t25 : Vector[t25<{s23: Int}>]
|     value: StructNode : {s23: Int}
|       s23: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:36,028 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Replacements are: Map((t25,s23) -> s23)
2019-10-10 10:13:36,028 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merging Bind into Comprehension as 'select':
| Bind : Vector[t28<{s27: Int}>]
|   from s14: ...
|   select: Pure t28 : Vector[t28<{s27: Int}>]
|     value: StructNode : {s27: Int}
|       s27: Path s14.s23 : Int

2019-10-10 10:13:36,029 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Merged Bind into Comprehension as 'select':
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: Int}>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t28 : Vector[t28<{s27: Int}>]
|     value: StructNode : {s27: Int}
|       s27: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:36,029 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Replacements are: Map((t28,s27) -> s27)
2019-10-10 10:13:36,029 [DEBUG] from slick.compiler.MergeToComprehensions in application-akka.actor.default-dispatcher-3 - Mappings are: ConstArray(((t28,s27),List(s27)))
2019-10-10 10:13:36,029 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<{s27: Int}>]
|       from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|       select: Pure t28 : Vector[t28<{s27: Int}>]
|         value: StructNode : {s27: Int}
|           s27: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|       where: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s29.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|         1: Apply Function = : Boolean
|           0: Path s29.TIMEVAL : java.time.LocalDateTime'
|           1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     map: Path s26.s27 : Int

2019-10-10 10:13:36,030 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase optimizeScalar: (no change)
2019-10-10 10:13:36,030 [DEBUG] from slick.compiler.RemoveFieldNames in application-akka.actor.default-dispatcher-3 - Required symbols: s27 -> 0
2019-10-10 10:13:36,031 [DEBUG] from slick.compiler.RemoveFieldNames in application-akka.actor.default-dispatcher-3 - Transformed RSM: 
| ResultSetMapping
|   from s26: Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<(Int)>]
|     from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|     select: Pure t28 : Vector[t28<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s29.BIDDER : String'
|         1: LiteralNode Appnexus (volatileHint=false) : String'
|       1: Apply Function = : Boolean
|         0: Path s29.TIMEVAL : java.time.LocalDateTime'
|         1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|   map: Path s26.s27 : Int

2019-10-10 10:13:36,032 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<(Int)>]
|       from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|       select: Pure t28 : Vector[t28<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|       where: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s29.BIDDER : String'
|           1: LiteralNode Appnexus (volatileHint=false) : String'
|         1: Apply Function = : Boolean
|           0: Path s29.TIMEVAL : java.time.LocalDateTime'
|           1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']
|     map: Path s26._1 : Int

2019-10-10 10:13:36,032 [DEBUG] from slick.compiler.CodeGen in application-akka.actor.default-dispatcher-3 - Compiling server-side and mapping with server-side:
| Comprehension s29, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t28<(Int)>]
|   from s29: Table IMPRESSION : Vector[@t11<{ID: Int', PLACEMENT: String', BIDDER: String', TIMEVAL: java.time.LocalDateTime'}>]
|   select: Pure t28 : Vector[t28<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s29.BIDDER : String'
|       1: LiteralNode Appnexus (volatileHint=false) : String'
|     1: Apply Function = : Boolean
|       0: Path s29.TIMEVAL : java.time.LocalDateTime'
|       1: LiteralNode 2019-09-12T07:30:01 (volatileHint=false) : MappedJdbcType[java.time.LocalDateTime -> java.sql.Timestamp']

2019-10-10 10:13:36,033 [DEBUG] from slick.relational.ResultConverterCompiler in application-akka.actor.default-dispatcher-3 - Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

2019-10-10 10:13:36,033 [DEBUG] from slick.compiler.CodeGen in application-akka.actor.default-dispatcher-3 - Compiled server-side to:
| CompiledStatement "select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" = {ts '2019-09-12 07:30:01.0'})" : Vector[t28<(Int)>]

2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompiler in application-akka.actor.default-dispatcher-3 - After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s26: CompiledStatement "select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" = {ts '2019-09-12 07:30:01.0'})" : Vector[t28<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 - ------------------- Phase: Time ---------
2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -       assignUniqueSymbols:    0,954957 ms
2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -           unrollTailBinds:    0,084591 ms
2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -                inferTypes:    0,138869 ms
2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -              expandTables:    1,757212 ms
2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -           forceOuterBinds:    1,316141 ms
2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -         removeMappedTypes:    0,234214 ms
2019-10-10 10:13:36,034 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -                expandSums:    1,101659 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -         emulateOuterJoins:    0,135909 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -             expandRecords:    0,998557 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -        flattenProjections:    3,782004 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -              rewriteJoins:    2,725025 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -             verifySymbols:    0,075319 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -             relabelUnions:    0,090252 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -          createAggregates:    7,220517 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -           resolveZipJoins:    0,044427 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -          pruneProjections:    0,253304 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -           rewriteDistinct:    0,012063 ms
2019-10-10 10:13:36,035 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -    createResultSetMapping:    0,782809 ms
2019-10-10 10:13:36,036 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -            hoistClientOps:    1,585377 ms
2019-10-10 10:13:36,036 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -         reorderOperations:    0,104244 ms
2019-10-10 10:13:36,036 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -     mergeToComprehensions:    7,745967 ms
2019-10-10 10:13:36,036 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -            optimizeScalar:    0,088488 ms
2019-10-10 10:13:36,036 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -          removeFieldNames:    2,361692 ms
2019-10-10 10:13:36,036 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -                   codeGen:    1,781940 ms
2019-10-10 10:13:36,036 [DEBUG] from slick.compiler.QueryCompilerBenchmark in application-akka.actor.default-dispatcher-3 -                     TOTAL:   35,375537 ms
2019-10-10 10:13:36,036 [DEBUG] from slick.basic.BasicBackend.action in application-akka.actor.default-dispatcher-3 - #1: result [select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" = {ts '2019-09-12 07:30:01.0'})]
2019-10-10 10:13:36,037 [DEBUG] from slick.jdbc.JdbcBackend.statement in db-2 - Preparing statement: select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" = {ts '2019-09-12 07:30:01.0'})
2019-10-10 10:13:36,037 [DEBUG] from slick.jdbc.JdbcBackend.statement in db-2 - Executing prepared statement: HikariProxyPreparedStatement@723619874 wrapping prep4: select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" =  ts '2019-09-12 07:30:01.0' )
2019-10-10 10:13:36,037 [DEBUG] from slick.jdbc.JdbcBackend.statementAndParameter in db-2 - Executing prepared statement: HikariProxyPreparedStatement@723619874 wrapping prep4: select count(1) from "IMPRESSION" where ("BIDDER" = 'Appnexus') and ("TIMEVAL" =  ts '2019-09-12 07:30:01.0' )
2019-10-10 10:13:36,037 [DEBUG] from slick.jdbc.JdbcBackend.benchmark in db-2 - Execution of prepared statement took 266µs
2019-10-10 10:13:36,038 [DEBUG] from slick.jdbc.StatementInvoker.result in db-2 - /----------\
2019-10-10 10:13:36,038 [DEBUG] from slick.jdbc.StatementInvoker.result in db-2 - | 1        |
2019-10-10 10:13:36,038 [DEBUG] from slick.jdbc.StatementInvoker.result in db-2 - | COUNT(1) |
2019-10-10 10:13:36,038 [DEBUG] from slick.jdbc.StatementInvoker.result in db-2 - |----------|
2019-10-10 10:13:36,038 [DEBUG] from slick.jdbc.StatementInvoker.result in db-2 - | 0        |
2019-10-10 10:13:36,038 [DEBUG] from slick.jdbc.StatementInvoker.result in db-2 - \----------/
2019-10-10 10:13:57,441 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db housekeeper - db - Pool stats (total=20, active=0, idle=20, waiting=0)
2019-10-10 10:14:27,444 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db housekeeper - db - Pool stats (total=20, active=0, idle=20, waiting=0)
2019-10-10 10:14:57,449 [DEBUG] from com.zaxxer.hikari.pool.HikariPool in db housekeeper - db - Pool stats (total=20, active=0, idle=20, waiting=0)
